#!/usr/bin/env python

import os
import platform
import shutil
import stat
import subprocess
import sys
import tarfile
import tempfile

try:
    from urllib.request import urlretrieve
except:
    from urllib import urlretrieve

def chmod_x(filename):
    st = os.stat(filename)
    os.chmod(filename, st.st_mode | stat.S_IEXEC | stat.S_IXGRP | stat.S_IXOTH)

def prepare_dest(dest):
    destdir = os.path.dirname(dest)
    if not os.path.exists(destdir):
        os.makedirs(destdir)

def install_bin_from_tar(tar, member, dest):
    fd = tar.extractfile(member)
    print("installing %s" % dest)
    prepare_dest(dest)
    with open(dest, "wb") as o:
        o.write(fd.read())
    fd.close()
    chmod_x(dest)

def install_from_tarurl(url, match_member, args):
    localfile = urlretrieve(url)[0]
    fmt = url.split(".")[-1]
    with tarfile.open(localfile, "r:%s"%fmt) as t:
        for m in t:
            if match_member(m):
                dest = os.path.join(args.prefix, "bin", os.path.basename(m.name))
                install_bin_from_tar(t, m, dest)
    os.unlink(localfile)

class Tool(object):
    @classmethod
    def is_installed(self, *args):
        if hasattr(self, "exe"):
            if sys.version_info[0] < 3:
                paths = os.environ["PATH"].split(":")
                for p in paths:
                    if os.path.exists(os.path.join(p, self.exe)):
                        return True
                return False
            return shutil.which(self.exe) is not None
    @classmethod
    def name(self):
        return self.__name__.lower()


class Clingo(Tool):
    exe = "clingo"
    min_version = (4,3)
    binfile_pat = "https://github.com/potassco/clingo/releases/download/v{0}/clingo-{0}-%s.tar.gz".format("5.2.0")
    binfile = {
        "linux64": binfile_pat % "linux-x86_64",
        "darwin": binfile_pat % "macos-10.9",
    }

    @classmethod
    def is_installed(self, args):
        if super(Clingo, self).is_installed(args):
            print("# checking clingo version (>=%s)" % \
                    ".".join(map(str, self.min_version)))
            try:
                output = subprocess.check_output([self.exe, "--version"]).decode()
                version = output.split("\n")[0].split()[2]
                print("# your clingo version is %s" % version)
                version = tuple(map(int, version.split(".")[:2]))
                return self.min_version <= version
            except:
                raise
            return True

    @classmethod
    def install(self, system, args):
        assert system in self.binfile, "Cannot install binaries for %s" % system
        binfile = self.binfile[system]
        def match_entry(m):
            return m.isfile() and os.path.basename(m.name) == "clingo"
        install_from_tarurl(binfile, match_entry, args)

class ITS(Tool):
    exe = "its-reach"
    url_pat = "https://api.anaconda.org/download/colomoto/its/20180905/%s/its-20180905-0.tar.bz2"
    binfile = {
        "linux64": url_pat % "linux-64",
    }
    @classmethod
    def install(self, system, args):
        assert system in self.binfile, "Cannot install binaries for %s" % system
        binfile = self.binfile[system]
        def match_entry(m):
            return m.name in ["bin/its-reach", "bin/its-ctl"]
        install_from_tarurl(binfile, match_entry, args)

class Mole(Tool):
    exe = "mole"
    binfile_pat = "http://loicpauleve.name/mole-%s.tgz"
    @classmethod
    def install(self, system, args):
        binfile = self.binfile_pat % system
        def match_entry(m):
            return m.name in ["mole", "mci2dot"]
        install_from_tarurl(binfile, match_entry, args)

tools = [Clingo, ITS, Mole]

if __name__ == "__main__":
    system = platform.system().lower()
    if system == "linux":
        system = "%s%s" % (system, platform.architecture()[0][:2])
    assert system in ["linux64", "linux32", "darwin"], \
        "Plaform %s is not supported" % system

    pintsharedir = subprocess.check_output(["pint-config", "share-path"])\
                        .decode().strip()
    os.environ["PATH"] = "%s/bin:%s" % (pintsharedir, os.environ["PATH"])

    from argparse import ArgumentParser
    parser = ArgumentParser(prog=sys.argv[0])
    for t in tools:
        n = t.name()
        parser.add_argument("--no-%s" % n, dest=n, action="store_false",
                default=True)
    parser.add_argument("--prefix", default=pintsharedir)
    parser.add_argument("--pintsharedir", default=pintsharedir)
    args = parser.parse_args()

    for t in tools:
        if not getattr(args, t.name()):
            continue
        if t.is_installed(args):
            print("# %s is already installed" % t.__name__)
            continue
        print("%s Installing %s " % ("#"*5, t.__name__))
        t.install(system, args)


